<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- namespace必须指向Dao接口 -->
<mapper namespace="com.slk.core.dao.sys.UserRoleDao">
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="sys-UserRole-columns">
	    <![CDATA[
		`id` as `id`, `user` as `user`, `role` as `role`, `created` as `created`, `deleted` as `deleted`, `last_operate_time` as `lastOperateTime`
	    ]]>
	</sql>	

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="save" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO sys_user_role (
        `id`, `user`, `role`, `created`, `deleted`, `last_operate_time`
        ) VALUES (
        #{id}, #{user}, #{role}, #{created}, #{deleted}, #{lastOperateTime}        
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="update">
    <![CDATA[
        UPDATE sys_user_role SET
	        `user` = #{user} , `role` = #{role} , `created` = #{created} , `deleted` = #{deleted} , `last_operate_time` = #{lastOperateTime}  
        WHERE 
        	id = #{id}  	        
    ]]>
	</update>

    <delete id="deleteById">
    <![CDATA[
        DELETE FROM sys_user_role WHERE
        `id` = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultType="UserRole">
		SELECT <include refid="sys-UserRole-columns" />
	    <![CDATA[
		    FROM sys_user_role 
	        WHERE 
		        `id` = #{id} 
	    ]]>
	</select>
	
	<sql id="UserRole-where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="id">
				AND `id` = #{id}
			</if>
	       <if test="user">
				AND `user` = #{user}
			</if>
	       <if test="role">
				AND `role` = #{role}
			</if>
	       <if test="createdBegin != null">
				AND `created` >= #{createdBegin}
		   </if>
		   <if test="createdEnd != null">
				AND `created` &lt;= #{createdEnd}
		   </if>
	       <if test="deleted">
				AND `deleted` = #{deleted}
			</if>
	       <if test="lastOperateTimeBegin != null">
				AND `last_operate_time` >= #{lastOperateTimeBegin}
		   </if>
		   <if test="lastOperateTimeEnd != null">
				AND `last_operate_time` &lt;= #{lastOperateTimeEnd}
		   </if>
		</where>
	</sql>
		
    <select id="count" resultType="long">
        SELECT count(*) FROM sys_user_role 
		<include refid="UserRole-where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultType="UserRole">
	   	SELECT <include refid="sys-UserRole-columns" /> FROM (
	    	SELECT <include refid="sys-UserRole-columns" />
		    FROM sys_user_role 
			<include refid="UserRole-where"/>
			
			<if test="sortColumns != null">
				ORDER BY ${sortColumns}
			</if>
		) limit ${offset}, ${pageSize}
    </select>
	
	<select id="list" resultType="UserRole">
    	SELECT <include refid="sys-UserRole-columns" />
	    FROM sys_user_role 
		<include refid="UserRole-where"/>
		
		<if test="sortColumns != null">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

