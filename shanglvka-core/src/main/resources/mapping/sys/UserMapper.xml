<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- namespace必须指向Dao接口 -->
<mapper namespace="com.slk.core.dao.sys.UserDao">
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="sys-User-columns">
	    <![CDATA[
		`id` as `id`, `company_id` as `companyId`, `office_id` as `officeId`, `login_name` as `loginName`, `password` as `password`, `no` as `no`, `name` as `name`, `email` as `email`, `phone` as `phone`, `mobile` as `mobile`, `user_type` as `userType`, `login_ip` as `loginIp`, `login_date` as `loginDate`, `create_by` as `createBy`, `create_date` as `createDate`, `update_by` as `updateBy`, `update_date` as `updateDate`, `remarks` as `remarks`, `del_flag` as `delFlag`
	    ]]>
	</sql>	

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="save" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO sys_user (
        `id`, `company_id`, `office_id`, `login_name`, `password`, `no`, `name`, `email`, `phone`, `mobile`, `user_type`, `login_ip`, `login_date`, `create_by`, `create_date`, `update_by`, `update_date`, `remarks`, `del_flag`
        ) VALUES (
        #{id}, #{companyId}, #{officeId}, #{loginName}, #{password}, #{no}, #{name}, #{email}, #{phone}, #{mobile}, #{userType}, #{loginIp}, #{loginDate}, #{createBy}, #{createDate}, #{updateBy}, #{updateDate}, #{remarks}, #{delFlag}        
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="update">
    <![CDATA[
        UPDATE sys_user SET
	        `company_id` = #{companyId} , `office_id` = #{officeId} , `login_name` = #{loginName} , `password` = #{password} , `no` = #{no} , `name` = #{name} , `email` = #{email} , `phone` = #{phone} , `mobile` = #{mobile} , `user_type` = #{userType} , `login_ip` = #{loginIp} , `login_date` = #{loginDate} , `create_by` = #{createBy} , `create_date` = #{createDate} , `update_by` = #{updateBy} , `update_date` = #{updateDate} , `remarks` = #{remarks} , `del_flag` = #{delFlag}  
        WHERE 
        	id = #{id}  	        
    ]]>
	</update>

    <delete id="deleteById">
    <![CDATA[
        DELETE FROM sys_user WHERE
        `id` = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultType="User">
		SELECT <include refid="sys-User-columns" />
	    <![CDATA[
		    FROM sys_user 
	        WHERE 
		        `id` = #{id} 
	    ]]>
	</select>
	
	<sql id="User-where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="id">
				AND `id` = #{id}
			</if>
	       <if test="companyId">
				AND `company_id` = #{companyId}
			</if>
	       <if test="officeId">
				AND `office_id` = #{officeId}
			</if>
	       <if test="loginName">
				AND `login_name` = #{loginName}
			</if>
	       <if test="password">
				AND `password` = #{password}
			</if>
	       <if test="no">
				AND `no` = #{no}
			</if>
	       <if test="name">
				AND `name` = #{name}
			</if>
	       <if test="email">
				AND `email` = #{email}
			</if>
	       <if test="phone">
				AND `phone` = #{phone}
			</if>
	       <if test="mobile">
				AND `mobile` = #{mobile}
			</if>
	       <if test="userType">
				AND `user_type` = #{userType}
			</if>
	       <if test="loginIp">
				AND `login_ip` = #{loginIp}
			</if>
	       <if test="loginDateBegin != null">
				AND `login_date` >= #{loginDateBegin}
		   </if>
		   <if test="loginDateEnd != null">
				AND `login_date` &lt;= #{loginDateEnd}
		   </if>
	       <if test="createBy">
				AND `create_by` = #{createBy}
			</if>
	       <if test="createDateBegin != null">
				AND `create_date` >= #{createDateBegin}
		   </if>
		   <if test="createDateEnd != null">
				AND `create_date` &lt;= #{createDateEnd}
		   </if>
	       <if test="updateBy">
				AND `update_by` = #{updateBy}
			</if>
	       <if test="updateDateBegin != null">
				AND `update_date` >= #{updateDateBegin}
		   </if>
		   <if test="updateDateEnd != null">
				AND `update_date` &lt;= #{updateDateEnd}
		   </if>
	       <if test="remarks">
				AND `remarks` = #{remarks}
			</if>
	       <if test="delFlag">
				AND `del_flag` = #{delFlag}
			</if>
		</where>
	</sql>
		
    <select id="count" resultType="long">
        SELECT count(*) FROM sys_user 
		<include refid="User-where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultType="User">
		SELECT <include refid="sys-User-columns" /> FROM (
			SELECT <include refid="sys-User-columns" />
			FROM sys_user 
			<include refid="User-where"/>
			
			<if test="sortColumns != null">
				ORDER BY ${sortColumns}
			</if>
		) limit #{offset}, #{pageSize}
    </select>
	
	<select id="list" resultType="User">
    	SELECT <include refid="sys-User-columns" />
	    FROM sys_user 
		<include refid="User-where"/>
		
		<if test="sortColumns != null">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

